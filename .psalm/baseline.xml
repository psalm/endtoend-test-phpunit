<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.6.0@e784128902dfe01d489c4123d69918a9f3c1eac5">
  <file src="src/Event/Dispatcher/DirectDispatcher.php">
    <UndefinedInterfaceMethod>
      <code>notify</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Event/Events/EventCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/Events/EventCollectionIterator.php">
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/Events/Test/HookMethod/AfterLastTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/AfterTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/BeforeFirstTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/BeforeTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/PostConditionFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/PreConditionFinished.php">
    <PropertyTypeCoercion>
      <code>$calledMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/TestDouble/MockObjectFromWsdlCreated.php">
    <PropertyTypeCoercion>
      <code>$methods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/TestDouble/PartialMockObjectCreated.php">
    <PropertyTypeCoercion>
      <code>$methodNames</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Facade.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$eventClass . 'Subscriber']]></code>
    </ArgumentTypeCoercion>
    <PossiblyNullReference>
      <code>flush</code>
    </PossiblyNullReference>
  </file>
  <file src="src/Event/Value/Runtime/PHP.php">
    <ImpureFunctionCall>
      <code>get_loaded_extensions</code>
    </ImpureFunctionCall>
  </file>
  <file src="src/Event/Value/Telemetry/HRTime.php">
    <ImpureMethodCall>
      <code>fromSecondsAndNanoseconds</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/Telemetry/MemoryUsage.php">
    <ImpureMethodCall>
      <code>fromBytes</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/Test/TestCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$tests</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Value/Test/TestCollectionIterator.php">
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/Value/Test/TestData/TestDataCollection.php">
    <ArgumentTypeCoercion>
      <code>$data</code>
    </ArgumentTypeCoercion>
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$data</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Value/Test/TestData/TestDataCollectionIterator.php">
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/Value/Test/TestMethod.php">
    <ImpureMethodCall>
      <code>dataFromDataProvider</code>
      <code>dataFromDataProvider</code>
      <code>hasDataFromDataProvider</code>
      <code>hasDataFromDataProvider</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/TestSuite/TestSuite.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code><![CDATA[$testSuite->getName()]]></code>
      <code><![CDATA[$testSuite->getName()]]></code>
      <code><![CDATA[$testSuite->getName()]]></code>
    </ArgumentTypeCoercion>
    <RedundantCast>
      <code><![CDATA[(int) $e->getCode()]]></code>
      <code><![CDATA[(int) $e->getCode()]]></code>
    </RedundantCast>
  </file>
  <file src="src/Event/Value/TestSuite/TestSuiteForTestMethodWithDataProvider.php">
    <PropertyTypeCoercion>
      <code>$className</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/Assert/Functions.php">
    <TooManyArguments>
      <code>Assert::anything(...func_get_args())</code>
      <code>Assert::directoryExists(...func_get_args())</code>
      <code>Assert::fileExists(...func_get_args())</code>
      <code>Assert::isEmpty(...func_get_args())</code>
      <code>Assert::isFalse(...func_get_args())</code>
      <code>Assert::isFinite(...func_get_args())</code>
      <code>Assert::isInfinite(...func_get_args())</code>
      <code>Assert::isJson(...func_get_args())</code>
      <code>Assert::isList(...func_get_args())</code>
      <code>Assert::isNan(...func_get_args())</code>
      <code>Assert::isNull(...func_get_args())</code>
      <code>Assert::isReadable(...func_get_args())</code>
      <code>Assert::isTrue(...func_get_args())</code>
      <code>Assert::isWritable(...func_get_args())</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/JsonMatches.php">
    <InvalidArgument>
      <code>false</code>
    </InvalidArgument>
    <TooManyArguments>
      <code><![CDATA[new ComparisonFailure(
                json_decode($this->value),
                json_decode($other),
                Json::prettify($recodedValue),
                Json::prettify($recodedOther),
                false,
                'Failed asserting that two json values are equal.'
            )]]></code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/ObjectEquals.php">
    <MissingThrowsDocblock>
      <code>getMethod</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/Operator/BinaryOperator.php">
    <PropertyTypeCoercion>
      <code><![CDATA[array_map(
            function ($constraint): Constraint
            {
                return $this->checkConstraint($constraint);
            },
            $constraints
        )]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/Operator/LogicalXor.php">
    <InvalidArgument>
      <code>bool</code>
    </InvalidArgument>
  </file>
  <file src="src/Framework/Constraint/Type/IsInstanceOf.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->className]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/DataProviderTestSuite.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->providedTests]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[list<ExecutionOrderDependency>]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Framework/MockObject/Builder/InvocationMocker.php">
    <PropertyTypeCoercion>
      <code>$configurableMethods</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/MockObject/Generator.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$className</code>
      <code>$interfaceName</code>
      <code>$methods</code>
      <code>$type</code>
    </ArgumentTypeCoercion>
    <InvalidReturnStatement>
      <code><![CDATA[$this->getMock(
                $originalClassName,
                $methods,
                $arguments,
                $mockClassName,
                $callOriginalConstructor,
                $callOriginalClone,
                $callAutoload,
                $cloneArguments
            )]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[MockObject&RealInstanceType]]></code>
    </InvalidReturnType>
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->getObject(
            $mock,
            $type,
            $callOriginalConstructor,
            $arguments,
            $callOriginalMethods,
            $proxyTarget,
            $returnValueGeneration
        )]]></code>
    </LessSpecificReturnStatement>
    <MissingThrowsDocblock>
      <code>getMethod</code>
    </MissingThrowsDocblock>
    <MoreSpecificReturnType>
      <code>MockObject</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Framework/MockObject/Invocation.php">
    <RedundantCast>
      <code><![CDATA[(int) $e->getCode()]]></code>
    </RedundantCast>
  </file>
  <file src="src/Framework/MockObject/Matcher.php">
    <InvalidNullableReturnType>
      <code>MethodName</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code><![CDATA[$this->methodNameRule]]></code>
    </NullableReturnStatement>
  </file>
  <file src="src/Framework/MockObject/MockBuilder.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->type]]></code>
      <code><![CDATA[$this->type]]></code>
      <code><![CDATA[$this->type]]></code>
      <code><![CDATA[$this->type]]></code>
    </ArgumentTypeCoercion>
    <InvalidReturnStatement>
      <code>$object</code>
      <code>$object</code>
      <code>$object</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[MockObject&MockedType]]></code>
      <code><![CDATA[MockObject&MockedType]]></code>
      <code><![CDATA[MockObject&MockedType]]></code>
    </InvalidReturnType>
    <RedundantCast>
      <code><![CDATA[(int) $e->getCode()]]></code>
      <code><![CDATA[(int) $e->getCode()]]></code>
    </RedundantCast>
  </file>
  <file src="src/Framework/MockObject/MockMethod.php">
    <InvalidArgument>
      <code><![CDATA[[
                'arguments_decl'     => $this->argumentsForDeclaration,
                'arguments_call'     => $this->argumentsForCall,
                'return_declaration' => !empty($this->returnType->asString()) ? (': ' . $this->returnType->asString()) : '',
                'return_type'        => $this->returnType->asString(),
                'arguments_count'    => !empty($this->argumentsForCall) ? substr_count($this->argumentsForCall, ',') + 1 : 0,
                'class_name'         => $this->className,
                'method_name'        => $this->methodName,
                'modifier'           => $this->modifier,
                'reference'          => $this->reference,
                'clone_arguments'    => $this->cloneArguments ? 'true' : 'false',
                'deprecation'        => $deprecation,
            ]]]></code>
    </InvalidArgument>
    <PossiblyFalseOperand>
      <code><![CDATA[strpos($parameterAsString, '<optional> ')]]></code>
    </PossiblyFalseOperand>
    <RedundantCast>
      <code><![CDATA[(int) $e->getCode()]]></code>
    </RedundantCast>
  </file>
  <file src="src/Framework/MockObject/Rule/Parameters.php">
    <PropertyNotSetInConstructor>
      <code>$parameterVerificationResult</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnCallback.php">
    <PossiblyInvalidOperand>
      <code><![CDATA[$this->callback]]></code>
    </PossiblyInvalidOperand>
  </file>
  <file src="src/Framework/MockObject/TemplateLoader.php">
    <RedundantCast>
      <code><![CDATA[(int) $e->getCode()]]></code>
    </RedundantCast>
  </file>
  <file src="src/Framework/TestBuilder.php">
    <LessSpecificReturnStatement>
      <code>$test</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>Test</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Framework/TestCase.php">
    <ArgumentTypeCoercion>
      <code>$mockClassName</code>
      <code>$originalClassName</code>
      <code><![CDATA[$this->expectedException]]></code>
    </ArgumentTypeCoercion>
    <InvalidReturnStatement>
      <code>$mockObject</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[MockObject&RealInstanceType]]></code>
    </InvalidReturnType>
    <MissingThrowsDocblock>
      <code>getMethod</code>
      <code>runTest</code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code>$outputBufferingLevel</code>
    </PropertyNotSetInConstructor>
    <PropertyTypeCoercion>
      <code>$backupGlobalsExcludeList</code>
      <code>$groups</code>
    </PropertyTypeCoercion>
    <RedundantCast>
      <code><![CDATA[(int) $e->getCode()]]></code>
    </RedundantCast>
    <UndefinedDocblockClass>
      <code>\SebastianBergmann\ObjectEnumerator\InvalidArgumentException</code>
      <code>\SebastianBergmann\ObjectEnumerator\InvalidArgumentException</code>
      <code>\SebastianBergmann\ObjectEnumerator\InvalidArgumentException</code>
    </UndefinedDocblockClass>
  </file>
  <file src="src/Framework/TestRunner.php">
    <InvalidArgument>
      <code>$var</code>
    </InvalidArgument>
  </file>
  <file src="src/Framework/TestSuite.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->name]]></code>
      <code><![CDATA[$this->name]]></code>
      <code><![CDATA[$this->name]]></code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->providedTests]]></code>
      <code><![CDATA[$this->requiredTests]]></code>
    </LessSpecificReturnStatement>
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <MoreSpecificReturnType>
      <code><![CDATA[list<ExecutionOrderDependency>]]></code>
      <code><![CDATA[list<ExecutionOrderDependency>]]></code>
    </MoreSpecificReturnType>
    <UnsafeInstantiation>
      <code><![CDATA[new static($class->getName())]]></code>
      <code>new static($name)</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Framework/TestSuiteIterator.php">
    <MissingTemplateParam>
      <code>RecursiveIterator</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Logging/JUnit/JunitXmlLogger.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->testSuiteTimes]]></code>
    </InvalidPropertyAssignmentValue>
    <RedundantCondition>
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Logging/TeamCity/TeamCityLogger.php">
    <PropertyNotSetInConstructor>
      <code>$flowId</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition>
      <code>assert($test instanceof TestMethod)</code>
      <code>assert($testSuite instanceof TestSuiteForTestClass)</code>
      <code>assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)</code>
      <code>assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)</code>
    </RedundantCondition>
  </file>
  <file src="src/Logging/TestDox/NamePrettifier.php">
    <InvalidCast>
      <code>$value</code>
    </InvalidCast>
  </file>
  <file src="src/Logging/TestDox/TestMethod/TestResultCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$testResults</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Logging/TestDox/TestMethod/TestResultCollectionIterator.php">
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Logging/TestDox/TestMethod/TestResultCollector.php">
    <PossiblyNullArgument>
      <code><![CDATA[$this->status]]></code>
      <code><![CDATA[$this->time]]></code>
    </PossiblyNullArgument>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->testDoubles]]></code>
    </PropertyTypeCoercion>
    <RedundantCondition>
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/CodeCoverage.php">
    <RedundantCast>
      <code><![CDATA[(int) $e->getCode()]]></code>
      <code><![CDATA[(int) $e->getCode()]]></code>
      <code><![CDATA[(int) $e->getCode()]]></code>
      <code><![CDATA[(int) $e->getCode()]]></code>
    </RedundantCast>
    <RedundantCondition>
      <code>$metadata instanceof CoversFunction</code>
      <code>$metadata instanceof UsesFunction</code>
      <code>assert($metadata instanceof Covers)</code>
      <code>assert($metadata instanceof Uses)</code>
    </RedundantCondition>
    <UndefinedMethod>
      <code>className</code>
      <code>className</code>
    </UndefinedMethod>
  </file>
  <file src="src/Metadata/Api/Dependencies.php">
    <RedundantCondition>
      <code>assert($metadata instanceof DependsOnClass)</code>
      <code>assert($metadata instanceof DependsOnMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/Groups.php">
    <LessSpecificReturnStatement>
      <code>array_unique($groups)</code>
      <code>array_unique($groups)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[list<string>]]></code>
    </MoreSpecificReturnType>
    <RedundantCondition>
      <code>$metadata instanceof CoversFunction</code>
      <code>$metadata instanceof UsesFunction</code>
      <code>assert($metadata instanceof Covers)</code>
      <code>assert($metadata instanceof Metadata)</code>
      <code>assert($metadata instanceof Uses)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/Requirements.php">
    <RedundantCondition>
      <code>assert($metadata instanceof RequiresFunction)</code>
      <code>assert($metadata instanceof RequiresMethod)</code>
      <code>assert($metadata instanceof RequiresOperatingSystem)</code>
      <code>assert($metadata instanceof RequiresOperatingSystemFamily)</code>
      <code>assert($metadata instanceof RequiresPhp)</code>
      <code>assert($metadata instanceof RequiresPhpExtension)</code>
      <code>assert($metadata instanceof RequiresPhpunit)</code>
      <code>assert($metadata instanceof RequiresSetting)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Metadata.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$className</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Metadata/MetadataCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$metadata</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Metadata/MetadataCollectionIterator.php">
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Metadata/Parser/Annotation/DocBlock.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[array_merge(
            $requires,
            ['__OFFSET' => $recordedOffsets],
            array_filter(
                [
                    'setting'            => $recordedSettings,
                    'extension_versions' => $extensionVersions,
                ]
            )
        )]]></code>
    </InvalidPropertyAssignmentValue>
    <InvalidReturnStatement>
      <code><![CDATA[$this->parsedRequirements = array_merge(
            $requires,
            ['__OFFSET' => $recordedOffsets],
            array_filter(
                [
                    'setting'            => $recordedSettings,
                    'extension_versions' => $extensionVersions,
                ]
            )
        )]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[array{
     *   __OFFSET: array<string, int>&array{__FILE: string},
     *   setting?: array<string, string>,
     *   extension_versions?: array<string, array{version: string, operator: string}>
     * }&array<
     *   string,
     *   string|array{version: string, operator: string}|array{constraint: string}|array<int|string, string>
     * >]]></code>
    </InvalidReturnType>
  </file>
  <file src="src/Metadata/Parser/Annotation/Registry.php">
    <RedundantCast>
      <code><![CDATA[(int) $e->getCode()]]></code>
      <code><![CDATA[(int) $e->getCode()]]></code>
    </RedundantCast>
  </file>
  <file src="src/Metadata/Parser/AnnotationParser.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$className</code>
      <code>$className</code>
      <code>$pieces[0]</code>
      <code>$pieces[0]</code>
      <code><![CDATA[explode('::', $value)]]></code>
      <code>trim($tmp[0])</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Metadata/Version/Requirement.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[!empty($matches['operator']) ? $matches['operator'] : '>=']]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Runner/CodeCoverage.php">
    <InvalidNullableReturnType>
      <code>Driver</code>
      <code>\SebastianBergmann\CodeCoverage\CodeCoverage</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code>self::$driver</code>
      <code>self::$instance</code>
    </NullableReturnStatement>
  </file>
  <file src="src/Runner/Filter/GroupFilterIterator.php">
    <MissingTemplateParam>
      <code>GroupFilterIterator</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->groupTests]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Runner/Filter/NameFilterIterator.php">
    <MissingTemplateParam>
      <code>NameFilterIterator</code>
    </MissingTemplateParam>
    <PossiblyNullArgument>
      <code><![CDATA[$this->filter]]></code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Runner/PhptTestCase.php">
    <InternalClass>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
    </InternalClass>
    <InternalMethod>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
    </InternalMethod>
    <PossiblyInvalidArgument>
      <code><![CDATA[$sections['FILEEOF']]]></code>
    </PossiblyInvalidArgument>
    <PossiblyUndefinedArrayOffset>
      <code>$setting[1]</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Runner/TestResult/Collector.php">
    <RedundantCondition>
      <code>assert($testSuite instanceof TestSuiteForTestClass)</code>
    </RedundantCondition>
  </file>
  <file src="src/Runner/TestSuiteLoader.php">
    <UnresolvableInclude>
      <code>include_once $suiteClassFile</code>
    </UnresolvableInclude>
  </file>
  <file src="src/Runner/TestSuiteSorter.php">
    <ArgumentTypeCoercion>
      <code>$tests</code>
      <code><![CDATA[$this->randomize($suite->tests())]]></code>
      <code><![CDATA[$this->resolveDependencies($tests)]]></code>
      <code><![CDATA[$this->reverse($suite->tests())]]></code>
      <code><![CDATA[$this->sortByDuration($suite->tests())]]></code>
      <code><![CDATA[$this->sortBySize($suite->tests())]]></code>
      <code><![CDATA[$this->sortDefectsFirst($suite->tests())]]></code>
    </ArgumentTypeCoercion>
    <RedundantCondition>
      <code><![CDATA[$order === self::ORDER_DURATION && $this->cache !== null]]></code>
      <code><![CDATA[$orderDefects === self::ORDER_DEFECTS_FIRST && $this->cache !== null]]></code>
      <code><![CDATA[$this->cache !== null]]></code>
      <code><![CDATA[$this->cache !== null]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Runner/Version.php">
    <UndefinedMethod>
      <code>getVersion</code>
    </UndefinedMethod>
  </file>
  <file src="src/TextUI/Application.php">
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$_SERVER['argv']]]></code>
    </PossiblyUndefinedArrayOffset>
    <UnresolvableInclude>
      <code>include_once $filename</code>
    </UnresolvableInclude>
  </file>
  <file src="src/TextUI/Configuration/Cli/Builder.php">
    <ArgumentTypeCoercion>
      <code>$parameters</code>
      <code>array_merge(self::LONG_OPTIONS, $additionalLongOptions)</code>
    </ArgumentTypeCoercion>
    <RedundantCast>
      <code><![CDATA[(int) $e->getCode()]]></code>
    </RedundantCast>
  </file>
  <file src="src/TextUI/Configuration/Cli/Configuration.php">
    <InvalidNullableReturnType>
      <code>bool</code>
      <code>string</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code><![CDATA[$this->excludeTestSuite]]></code>
      <code><![CDATA[$this->teamCityPrinter]]></code>
    </NullableReturnStatement>
  </file>
  <file src="src/TextUI/Configuration/CodeCoverageFilterRegistry.php">
    <DeprecatedMethod>
      <code>includeDirectory</code>
    </DeprecatedMethod>
  </file>
  <file src="src/TextUI/Configuration/Configuration.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->testsCovering]]></code>
      <code><![CDATA[$this->testsUsing]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[list<string>]]></code>
      <code><![CDATA[list<string>]]></code>
    </MoreSpecificReturnType>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$columns</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="src/TextUI/Configuration/Merger.php">
    <DeprecatedMethod>
      <code>cacheDirectory</code>
      <code>cacheResultFile</code>
      <code>hasCacheDirectory</code>
      <code>hasCacheResultFile</code>
    </DeprecatedMethod>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$_SERVER['PHP_SELF']]]></code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCondition>
      <code>assert($xmlConfiguration instanceof LoadedFromFileConfiguration)</code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/Configuration/TestSuiteBuilder.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->testSuffixes($cliConfiguration)]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/CodeCoverage/CodeCoverage.php">
    <DeprecatedMethod>
      <code>hasCacheDirectory</code>
    </DeprecatedMethod>
  </file>
  <file src="src/TextUI/Configuration/Xml/CodeCoverage/Filter/DirectoryCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$directories</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/CodeCoverage/Filter/DirectoryCollectionIterator.php">
    <InvalidNullableReturnType>
      <code>int</code>
    </InvalidNullableReturnType>
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
    <NullableReturnStatement>
      <code><![CDATA[$this->position]]></code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset>
      <code><![CDATA[$this->directories]]></code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/CodeCoverage/FilterMapper.php">
    <DeprecatedMethod>
      <code>excludeDirectory</code>
      <code>excludeFile</code>
      <code>includeDirectory</code>
    </DeprecatedMethod>
  </file>
  <file src="src/TextUI/Configuration/Xml/Filesystem/DirectoryCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$directories</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/Filesystem/DirectoryCollectionIterator.php">
    <InvalidNullableReturnType>
      <code>int</code>
    </InvalidNullableReturnType>
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
    <NullableReturnStatement>
      <code><![CDATA[$this->position]]></code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset>
      <code><![CDATA[$this->directories]]></code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/Filesystem/FileCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$files</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/Filesystem/FileCollectionIterator.php">
    <InvalidNullableReturnType>
      <code>int</code>
    </InvalidNullableReturnType>
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
    <NullableReturnStatement>
      <code><![CDATA[$this->position]]></code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset>
      <code><![CDATA[$this->files]]></code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/Group/GroupCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$groups</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/Group/GroupCollectionIterator.php">
    <InvalidNullableReturnType>
      <code>int</code>
    </InvalidNullableReturnType>
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
    <NullableReturnStatement>
      <code><![CDATA[$this->position]]></code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset>
      <code><![CDATA[$this->groups]]></code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/Loader.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$bootstrap->getAttribute('class')]]></code>
      <code><![CDATA[$directoryNode->getAttribute('phpVersionOperator')]]></code>
      <code><![CDATA[$fileNode->getAttribute('phpVersionOperator')]]></code>
    </ArgumentTypeCoercion>
    <RedundantCast>
      <code><![CDATA[(int) $e->getCode()]]></code>
      <code><![CDATA[(int) $e->getCode()]]></code>
    </RedundantCast>
    <RedundantConditionGivenDocblockType>
      <code>assert($directoryNode instanceof DOMElement)</code>
      <code>assert($fileNode instanceof DOMElement)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageCloverToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageCrap4jToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageHtmlToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoveragePhpToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageTextToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageXmlToReport.php">
    <PossiblyNullReference>
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/LogToReportMigration.php">
    <PossiblyNullReference>
      <code>removeChild</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/RemoveEmptyFilter.php">
    <PossiblyNullReference>
      <code>removeChild</code>
      <code>removeChild</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/ConstantCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$constants</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/ConstantCollectionIterator.php">
    <InvalidNullableReturnType>
      <code>int</code>
    </InvalidNullableReturnType>
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
    <NullableReturnStatement>
      <code><![CDATA[$this->position]]></code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset>
      <code><![CDATA[$this->constants]]></code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/IniSettingCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$iniSettings</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/IniSettingCollectionIterator.php">
    <InvalidNullableReturnType>
      <code>int</code>
    </InvalidNullableReturnType>
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
    <NullableReturnStatement>
      <code><![CDATA[$this->position]]></code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset>
      <code><![CDATA[$this->iniSettings]]></code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/VariableCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$variables</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/VariableCollectionIterator.php">
    <InvalidNullableReturnType>
      <code>int</code>
    </InvalidNullableReturnType>
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
    <NullableReturnStatement>
      <code><![CDATA[$this->position]]></code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset>
      <code><![CDATA[$this->variables]]></code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHPUnit/ExtensionBootstrapCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$extensionBootstraps</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHPUnit/ExtensionBootstrapCollectionIterator.php">
    <InvalidNullableReturnType>
      <code>int</code>
    </InvalidNullableReturnType>
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
    <NullableReturnStatement>
      <code><![CDATA[$this->position]]></code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset>
      <code><![CDATA[$this->extensionBootstraps]]></code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHPUnit/PHPUnit.php">
    <DeprecatedMethod>
      <code>hasCacheResultFile</code>
    </DeprecatedMethod>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuite/TestDirectoryCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$directories</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuite/TestDirectoryCollectionIterator.php">
    <InvalidNullableReturnType>
      <code>int</code>
    </InvalidNullableReturnType>
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
    <NullableReturnStatement>
      <code><![CDATA[$this->position]]></code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset>
      <code><![CDATA[$this->directories]]></code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuite/TestFileCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$files</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuite/TestFileCollectionIterator.php">
    <InvalidNullableReturnType>
      <code>int</code>
    </InvalidNullableReturnType>
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
    <NullableReturnStatement>
      <code><![CDATA[$this->position]]></code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset>
      <code><![CDATA[$this->files]]></code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuite/TestSuiteCollection.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
    <PropertyTypeCoercion>
      <code>$testSuites</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuite/TestSuiteCollectionIterator.php">
    <InvalidNullableReturnType>
      <code>int</code>
    </InvalidNullableReturnType>
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
    <NullableReturnStatement>
      <code><![CDATA[$this->position]]></code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset>
      <code><![CDATA[$this->testSuites]]></code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuiteMapper.php">
    <RedundantCast>
      <code><![CDATA[(int) $e->getCode()]]></code>
    </RedundantCast>
  </file>
  <file src="src/TextUI/Help.php">
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$option['desc']]]></code>
      <code><![CDATA[$option['desc']]]></code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/TextUI/Output/Default/ResultPrinter.php">
    <RedundantCondition>
      <code>assert($test instanceof TestMethod)</code>
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/TestRunner.php">
    <InternalMethod>
      <code>nameAndVersion</code>
    </InternalMethod>
    <PropertyNotSetInConstructor>
      <code>$printer</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/ExcludeList.php">
    <InvalidPropertyAssignmentValue>
      <code>self::$directories</code>
      <code>self::$directories</code>
      <code>self::$directories</code>
    </InvalidPropertyAssignmentValue>
  </file>
  <file src="src/Util/PHP/DefaultPhpProcess.php">
    <DocblockTypeContradiction>
      <code>is_array($envVar)</code>
    </DocblockTypeContradiction>
    <RedundantCondition>
      <code>$_SERVER</code>
    </RedundantCondition>
    <TypeDoesNotContainNull>
      <code>[]</code>
    </TypeDoesNotContainNull>
  </file>
  <file src="src/Util/Printer/DefaultPrinter.php">
    <PossiblyInvalidArgument>
      <code><![CDATA[$this->stream]]></code>
      <code><![CDATA[$this->stream]]></code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Util/Reflection.php">
    <ArgumentTypeCoercion>
      <code>$filter</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Util/VersionComparisonOperator.php">
    <DocblockTypeContradiction>
      <code><![CDATA[in_array($operator, ['<', 'lt', '<=', 'le', '>', 'gt', '>=', 'ge', '==', '=', 'eq', '!=', '<>', 'ne'], true)]]></code>
    </DocblockTypeContradiction>
    <NoValue>
      <code>$operator</code>
    </NoValue>
  </file>
  <file src="src/Util/Xml/SnapshotNodeList.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
  </file>
</files>
